{"ast":null,"code":"var _jsxFileName = \"/Users/danilledaev/my-app/src/Main.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Pagination } from \"./Pagination\"; // import { Data } from \"./emogiJson\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Main = () => {\n  _s();\n\n  const url = \" https://emoji.ymatuhin.workers.dev/\";\n  const [data, setData] = useState([]);\n  const [emogiFiltred, setEmogiFiltred] = useState([]);\n  const [value, setValue] = useState(\"\"); // const [loading, setLoading] = useState(false); // ожидание   загрузки\n\n  const [currentPage, setCurrentPage] = useState(1); // для oтображения текущей страницы\n\n  const [countCurrentPage, setCountCurrentPage] = useState(12); //отображение колличества элементов которые нам нужно отображать на странице\n  //Прослушивание события из input\n\n  const handlChange = event => setValue(event.target.value); //Фильтрация по двум ключевым словам и более\n\n\n  const filterSmile = value => {\n    let newData = data;\n    value.split(\" \").forEach(word => newData = newData.filter(elem => elem.keywords.toLowerCase().includes(word.toLowerCase())));\n    setEmogiFiltred(newData);\n  };\n\n  const lastEmogiIndex = currentPage * countCurrentPage; // высчитывание последнего индекса.\n\n  const firstElemIndex = lastEmogiIndex - countCurrentPage; // вычисление первого элемента индекс.\n\n  const currentEmogi = emogiFiltred.slice(firstElemIndex, lastEmogiIndex); //на к\n\n  const getData = async () => {\n    let response = await fetch(url);\n    let makeJson = await response.json();\n    setData(makeJson);\n    setEmogiFiltred(makeJson); //\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  const displaySmile = currentEmogi.map(elem => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"styleCard elem-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"smile\",\n          children: [elem.symbol, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: elem.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keywords\",\n          children: [elem.keywords, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, elem.keywords, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this));\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); //\n\n\n  const nextPage = () => setCurrentPage(event => event + 1); //кнопки переключения по страницам\n\n\n  const pref = () => setCurrentPage(event => event - 1); //кнопки переключения по страницам\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"header__title\",\n        children: \"Emoji Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"h4\",\n        children: \"Find emoji by keywords\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        placeholder: \"Placeholder\",\n        type: \"text\",\n        onChange: event => {\n          handlChange(event);\n          filterSmile(event.target.value);\n          console.log(event.target.value);\n          console.log(value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: displaySmile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paginatior\",\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          page: currentPage,\n          datalength: filterSmile.length,\n          countCurrentPage: countCurrentPage,\n          paginate: paginate,\n          pref: pref,\n          nextPage: nextPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"F/pwg78MD5wOEjHhy+vl6lvn19E=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/danilledaev/my-app/src/Main.js"],"names":["useState","useEffect","Pagination","Main","url","data","setData","emogiFiltred","setEmogiFiltred","value","setValue","currentPage","setCurrentPage","countCurrentPage","setCountCurrentPage","handlChange","event","target","filterSmile","newData","split","forEach","word","filter","elem","keywords","toLowerCase","includes","lastEmogiIndex","firstElemIndex","currentEmogi","slice","getData","response","fetch","makeJson","json","displaySmile","map","symbol","title","paginate","pageNumber","nextPage","pref","console","log","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Pagination } from \"./Pagination\";\n// import { Data } from \"./emogiJson\";\n\nexport const Main = () => {\n  const url = \" https://emoji.ymatuhin.workers.dev/\";\n  const [data, setData] = useState([]);\n  const [emogiFiltred, setEmogiFiltred] = useState([]);\n  const [value, setValue] = useState(\"\");\n  // const [loading, setLoading] = useState(false); // ожидание   загрузки\n  const [currentPage, setCurrentPage] = useState(1); // для oтображения текущей страницы\n  const [countCurrentPage, setCountCurrentPage] = useState(12); //отображение колличества элементов которые нам нужно отображать на странице\n\n  //Прослушивание события из input\n  const handlChange = (event) => setValue(event.target.value);\n  //Фильтрация по двум ключевым словам и более\n  const filterSmile = (value) => {\n    let newData = data;\n    value\n      .split(\" \")\n      .forEach(\n        (word) =>\n          (newData = newData.filter((elem) =>\n            elem.keywords.toLowerCase().includes(word.toLowerCase())\n          ))\n      );\n    setEmogiFiltred(newData);\n  };\n\n  const lastEmogiIndex = currentPage * countCurrentPage; // высчитывание последнего индекса.\n  const firstElemIndex = lastEmogiIndex - countCurrentPage; // вычисление первого элемента индекс.\n  const currentEmogi = emogiFiltred.slice(firstElemIndex, lastEmogiIndex); //на к\n  const getData = async () => {\n    let response = await fetch(url);\n    let makeJson = await response.json();\n    setData(makeJson);\n    setEmogiFiltred(makeJson); //\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const displaySmile = currentEmogi.map((elem) => (\n    <div>\n      <div key={elem.keywords}>\n        <div className=\"styleCard elem-card\">\n          <div className=\"smile\">{elem.symbol} </div>\n          <br />\n          <div className=\"title\">{elem.title}</div>\n          <br />\n          <div className=\"keywords\">{elem.keywords} </div>\n        </div>\n      </div>\n    </div>\n  ));\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber); //\n  const nextPage = () => setCurrentPage((event) => event + 1); //кнопки переключения по страницам\n  const pref = () => setCurrentPage((event) => event - 1); //кнопки переключения по страницам\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1 className=\"header__title\">Emoji Finder</h1>\n        <h4 className=\"h4\">Find emoji by keywords</h4>\n\n        <input\n          className=\"input\"\n          placeholder=\"Placeholder\"\n          type=\"text\"\n          onChange={(event) => {\n            handlChange(event);\n            filterSmile(event.target.value);\n            console.log(event.target.value);\n            console.log(value);\n          }}\n        />\n      </header>\n      <div className=\"container\">\n        <div className=\"content\">{displaySmile}</div>\n\n        <div className=\"paginatior\">\n          <Pagination\n            page={currentPage}\n            datalength={filterSmile.length}\n            countCurrentPage={countCurrentPage}\n            paginate={paginate}\n            pref={pref}\n            nextPage={nextPage}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}