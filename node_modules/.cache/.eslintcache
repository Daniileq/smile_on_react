[{"/Users/danilledaev/my-app/src/index.js":"1","/Users/danilledaev/my-app/src/App.js":"2","/Users/danilledaev/my-app/src/Main.js":"3","/Users/danilledaev/my-app/src/Loading.js":"4","/Users/danilledaev/my-app/src/pogination.js":"5"},{"size":177,"mtime":1645525342865,"results":"6","hashOfConfig":"7"},{"size":150,"mtime":1645534396545,"results":"8","hashOfConfig":"7"},{"size":2844,"mtime":1645534338896,"results":"9","hashOfConfig":"7"},{"size":636,"mtime":1645534417416,"results":"10","hashOfConfig":"7"},{"size":711,"mtime":1645534265552,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"180un7g",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danilledaev/my-app/src/index.js",[],[],"/Users/danilledaev/my-app/src/App.js",["29"],[],"/Users/danilledaev/my-app/src/Main.js",["30","31"],[],"import { useState, useEffect } from \"react\";\nimport { Pagination } from \"./pogination\";\n// import { Data } from \"./emogiJson\";\n\nexport const Main = () => {\n  const url = \" https://emoji.ymatuhin.workers.dev/\";\n  const [data, setData] = useState([]);\n  const [value, setValue] = useState(\"\");\n  // const [loading, setLoading] = useState(false); // ожидание   загрузки\n  const [currentPage, setCurrentPage] = useState(1); // для отображения текущей страницы\n  const [countCurrentPage, setCountCurrentPage] = useState(12); //отображение колличества элементов которые нам нужно отображать на странице\n\n  const lastEmogiIndex = currentPage * countCurrentPage; // высчитывание последнего индекса\n  const firstElemIndex = lastEmogiIndex - countCurrentPage; // вычисление первого элемента индекс.\n  const currentEmogi = data.slice(firstElemIndex, lastEmogiIndex);\n\n  //Прослушивание события из input\n  const handlChange = (event) => setValue(event.target.value);\n  const valueArr = value.split(\" \");\n  const filterSmile = currentEmogi.filter((elem) =>\n    elem.keywords.toLowerCase().includes(valueArr)\n  );\n\n  const getData = async () => {\n    let response = await fetch(url);\n    let makeJson = await response.json();\n    setData(makeJson);\n  };\n  console.log(data);\n  useEffect(() => {\n    getData();\n  }, []);\n  const displaySmile = filterSmile.map((elem) => (\n    <div key={elem.keywords}>\n      <div className=\"styleCard\" className=\"elem-card\">\n        <div className=\"smile\">{elem.symbol}</div>\n        <br />\n        <div className=\"title\">{elem.title}</div>\n        <br />\n        <div className=\"keywords\">{elem.keywords}</div>\n      </div>\n    </div>\n  ));\n\n  const paginate = (pageNamber) => setCurrentPage(pageNamber); //\n  const nextPage = () => setCurrentPage((event) => event + 1); //кнопки переключения по страницам\n  const lastPage = () => setCurrentPage((event) => event - 1); //кнопки переключения по страницам\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1 className=\"header__title\">Emoji Finder</h1>\n        <h4 className=\"h4\">Find emoji by keywords</h4>\n\n        <input\n          className=\"input\"\n          placeholder=\"Placeholder\"\n          type=\"text\"\n          onChange={handlChange}\n        />\n      </header>\n      <div className=\"container\">\n        <div className=\"content\">{displaySmile}</div>\n      </div>\n      <div>\n        <Pagination\n          datalength={data.length}\n          countCurrentPage={countCurrentPage}\n          paginate={paginate}\n          lastPage={lastPage}\n          nextPage={nextPage}\n        />\n      </div>\n    </>\n  );\n};\n",["32","33"],"/Users/danilledaev/my-app/src/Loading.js",["34","35"],[],"/Users/danilledaev/my-app/src/pogination.js",["36"],[],{"ruleId":"37","severity":1,"message":"38","line":2,"column":10,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"37","severity":1,"message":"41","line":11,"column":28,"nodeType":"39","messageId":"40","endLine":11,"endColumn":47},{"ruleId":"42","severity":1,"message":"43","line":35,"column":34,"nodeType":"44","messageId":"45","endLine":35,"endColumn":55},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":12,"column":13,"nodeType":"52","endLine":14,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":19,"column":28,"nodeType":"55","messageId":"56","endLine":19,"endColumn":30},{"ruleId":"57","severity":1,"message":"58","line":21,"column":13,"nodeType":"59","endLine":21,"endColumn":78},"no-unused-vars","'GetUrl' is defined but never used.","Identifier","unusedVar","'setCountCurrentPage' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]